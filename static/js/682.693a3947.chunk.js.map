{"version":3,"file":"static/js/682.693a3947.chunk.js","mappings":"8SAEAA,EAAAA,GAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6GAEoBF,EAAAA,GAAAA,IAAA,qCAAwCC,IAF5D,cAEGE,EAFH,yBAGIA,EAASC,KAAKC,SAHlB,gCAKHC,QAAQC,MAAR,MALG,gFASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,gGAEoBT,EAAAA,GAAAA,IAAA,+BACGC,EADH,iCACmCQ,EADnC,gCAFpB,cAEGN,EAFH,yBAKIA,EAASC,KAAKC,SALlB,gCAOHC,QAAQC,MAAR,MAPG,gFAWA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAkCC,GAAlC,gGAEoBX,EAAAA,GAAAA,IAAA,gBACZW,EADY,oBACMV,EADN,oBAFpB,cAEGE,EAFH,yBAKIA,EAASC,MALb,gCAOHE,QAAQC,MAAR,MAPG,gFAWA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA8BD,GAA9B,gGAEoBX,EAAAA,GAAAA,IAAA,gBACZW,EADY,4BACcV,EADd,oBAFpB,cAEGE,EAFH,yBAKIA,EAASC,KAAKS,MALlB,gCAOHP,QAAQC,MAAR,MAPG,gFAWA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAA8BH,GAA9B,gGAEoBX,EAAAA,GAAAA,IAAA,gBACZW,EADY,4BACcV,EADd,2BAFpB,cAEGE,EAFH,yBAKIA,EAASC,KAAKC,SALlB,gCAOHC,QAAQC,MAAR,MAPG,gF,+LC7CMQ,EAAUC,EAAAA,QAAAA,IAAH,6CAIPC,EAAOD,EAAAA,QAAAA,GAAH,wRAaJE,EAAWF,EAAAA,QAAAA,GAAH,+EAMRG,EAAQH,EAAAA,QAAAA,IAAH,iFAMLI,EAAWJ,EAAAA,QAAAA,EAAH,4IAURK,EAAcL,EAAAA,QAAAA,KAAH,2C,SCuBxB,EA/Ca,WACX,IAAQM,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAoCE,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOjB,EAAP,KAAcoB,EAAd,KAHiB,wCASjB,WAA8BC,GAA9B,wFACyBhB,EAAAA,EAAAA,IAAegB,GADxC,WACQC,EADR,QAGgBC,OAHhB,uBAIIH,GAAS,GAJb,0BAOED,EAAcG,GACdF,GAAS,GARX,4CATiB,sBAoBjB,OAfAI,EAAAA,EAAAA,YAAU,YALO,oCAMfC,CAAeV,EAChB,GAAE,CAACA,KAcF,UAACP,EAAD,WACGR,IACC,SAAC,IAAD,CAAc0B,KAAM,6DAEX,IAAV1B,IACC,SAACU,EAAD,UACGQ,EAAWS,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,aAAcC,EAAvB,EAAuBA,UAAvB,OACd,UAACnB,EAAD,YACE,SAACC,EAAD,CACEmB,IAAKF,EAAeG,EAAAA,EAASH,EAAeI,EAC5CC,IAAKN,KAEP,UAACf,EAAD,qBACQ,SAACC,EAAD,UAAcc,QAEtB,UAACf,EAAD,0BACa,SAACC,EAAD,UAAcgB,SATdF,EADD,QAkBzB,C,qEC5DYO,E,OAAQ1B,QAAAA,EAAH,iE,SCEL2B,EAAe,SAAC,GAAD,IAAGV,EAAH,EAAGA,KAAH,OAAc,SAACS,EAAD,UAAQT,GAAtB,C,sDCJrB,IAAMM,EAAS,iC","sources":["api/api.js","components/Cast/Cast.styles.js","components/Cast/Cast.jsx","components/ErrorMessage/ErrorMessage.styled.js","components/ErrorMessage/ErorrMessage.jsx","constans/imgUrl.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '74bfe718a55ac7916c6e6ad87b15f944';\n\nexport async function fetchTrendyFilms() {\n  try {\n    const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function fetchFilmsByName(query) {\n  try {\n    const response = await axios.get(\n      `search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getFilmInformation(filmId) {\n  try {\n    const response = await axios.get(\n      `movie/${filmId}?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getFilmCredits(filmId) {\n  try {\n    const response = await axios.get(\n      `movie/${filmId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getFilmReviews(filmId) {\n  try {\n    const response = await axios.get(\n      `movie/${filmId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  margin-top: 30px;\n`;\n\nexport const List = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const ListItem = styled.li`\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Photo = styled.img`\n  width: 100%;\n  height: 400px;\n  margin-bottom: 8px;\n`;\n\nexport const Category = styled.p`\n  color: #4d4f57;\n\n  font-weight: 400;\n  font-size: 15px;\n  :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Description = styled.span`\n  color: #ffffff;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getFilmCredits } from 'api/api';\nimport { ErrorMessage } from 'components/ErrorMessage/ErorrMessage';\nimport { imgUrl } from '../../constans/imgUrl';\nimport img from '../../img/noImage.png';\n\nimport {\n  Wrapper,\n  List,\n  ListItem,\n  Photo,\n  Category,\n  Description,\n} from './Cast.styles';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [actorsList, setActorsList] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    createCastList(movieId);\n  }, [movieId]);\n\n  async function createCastList(id) {\n    const castList = await getFilmCredits(id);\n\n    if (!castList.length) {\n      setError(true);\n      return;\n    }\n    setActorsList(castList);\n    setError(false);\n  }\n\n  return (\n    <Wrapper>\n      {error && (\n        <ErrorMessage text={'Sorry, there are no information about cast ðŸ˜¢'} />\n      )}\n      {error === false && (\n        <List>\n          {actorsList.map(({ name, profile_path, character }) => (\n            <ListItem key={name}>\n              <Photo\n                src={profile_path ? imgUrl + profile_path : img}\n                alt={name}\n              ></Photo>\n              <Category>\n                Name: <Description>{name}</Description>\n              </Category>\n              <Category>\n                Character: <Description>{character}</Description>\n              </Category>\n            </ListItem>\n          ))}\n        </List>\n      )}\n    </Wrapper>\n  );\n};\n\nexport default Cast;\n","import styled from 'styled-components';\n\nexport const Error = styled.p`\n  font-size: 30px;\n  font-weight: 600;\n`;\n","import PropTypes from 'prop-types';\n\nimport { Error } from './ErrorMessage.styled';\n\nexport const ErrorMessage = ({ text }) => <Error>{text}</Error>;\n\nErrorMessage.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n","export const imgUrl = 'https://image.tmdb.org/t/p/w500';\n"],"names":["axios","API_KEY","fetchTrendyFilms","response","data","results","console","error","fetchFilmsByName","query","getFilmInformation","filmId","getFilmCredits","cast","getFilmReviews","Wrapper","styled","List","ListItem","Photo","Category","Description","movieId","useParams","useState","actorsList","setActorsList","setError","id","castList","length","useEffect","createCastList","text","map","name","profile_path","character","src","imgUrl","img","alt","Error","ErrorMessage"],"sourceRoot":""}