{"version":3,"file":"static/js/253.e9e28b12.chunk.js","mappings":"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","sources":["api/api.js","components/ErrorMessage/ErrorMessage.styled.js","components/ErrorMessage/ErorrMessage.jsx","components/MovieList/MovieList.styled.js","components/MovieList/MovieList.jsx","constans/imgUrl.js","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.jsx","pages/Movies/Movies.styled.js","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '74bfe718a55ac7916c6e6ad87b15f944';\n\nexport async function fetchTrendyFilms() {\n  try {\n    const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function fetchFilmsByName(query) {\n  try {\n    const response = await axios.get(\n      `search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getFilmInformation(filmId) {\n  try {\n    const response = await axios.get(\n      `movie/${filmId}?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getFilmCredits(filmId) {\n  try {\n    const response = await axios.get(\n      `movie/${filmId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getFilmReviews(filmId) {\n  try {\n    const response = await axios.get(\n      `movie/${filmId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n","import styled from 'styled-components';\n\nexport const Error = styled.p`\n  font-size: 30px;\n  font-weight: 600;\n`;\n","import PropTypes from 'prop-types';\n\nimport { Error } from './ErrorMessage.styled';\n\nexport const ErrorMessage = ({ text }) => <Error>{text}</Error>;\n\nErrorMessage.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const MovieItem = styled.li`\n  position: relative;\n  overflow: hidden;\n  border-radius: 20px;\n\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Poster = styled.img`\n  width: 100%;\n  height: 400px;\n`;\n\nexport const MovieInfo = styled.div`\n  background-color: rgba(49, 54, 73, 0.7);\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  position: absolute;\n  bottom: 0;\n  transition: transform 300ms cubic-bezier(0.23, 1, 0.32, 1);\n  transform: translateY(100%);\n  li:hover &,\n  li:focus & {\n    transform: translateY(0%);\n  }\n`;\n\nexport const MovieName = styled.p`\n  font-size: 20px;\n\n  font-weight: 600;\n  text-align: center;\n`;\n\nexport const ReleaseDate = styled.p`\n  font-size: 15px;\n\n  text-align: center;\n`;\n\nexport const Rating = styled.p`\n  font-size: 15px;\n\n  text-align: center;\n\n  color: ${p => {\n    if (p.rating <= 3.5) {\n      return '#A5260A';\n    }\n    if (p.rating < 7) {\n      return '#FFDB8B';\n    }\n    if (p.rating < 10) {\n      return '#009B76';\n    }\n  }};\n`;\n","import { useState, useEffect } from 'react';\nimport { NavLink, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { fetchTrendyFilms } from 'api/api';\nimport { imgUrl } from 'constans/imgUrl';\nimport poster from '../../img/noPoster.jpeg';\n\nimport {\n  List,\n  MovieItem,\n  Poster,\n  MovieInfo,\n  MovieName,\n  ReleaseDate,\n  Rating,\n} from './MovieList.styled';\n\nexport const MovieList = ({ list }) => {\n  const [movies, setMovies] = useState([]);\n  const location = useLocation();\n  const currentUrl = location.pathname === '/' ? 'movies/' : '';\n\n  useEffect(() => {\n    if (list) {\n      // eslint-disable-next-line\n      setMovies(list);\n      return;\n    }\n    createMovieList();\n  }, [list]);\n\n  async function createMovieList() {\n    const trendyMovies = await fetchTrendyFilms();\n\n    if (!trendyMovies) {\n      return;\n    }\n    setMovies(trendyMovies);\n  }\n\n  return (\n    <div>\n      <List>\n        {movies.map(\n          ({ id, poster_path, title, release_date, vote_average }) => (\n            <MovieItem key={id}>\n              <NavLink to={`${currentUrl}${id}`} state={{ from: location }}>\n                <Poster\n                  src={poster_path ? imgUrl + poster_path : poster}\n                  alt={title}\n                ></Poster>\n                <MovieInfo>\n                  <MovieName>{title}</MovieName>\n                  <ReleaseDate>{release_date}</ReleaseDate>\n                  <Rating rating={vote_average}>\n                    {vote_average.toFixed(1)} rating\n                  </Rating>\n                </MovieInfo>\n              </NavLink>\n            </MovieItem>\n          )\n        )}\n      </List>\n    </div>\n  );\n};\n\nMovieList.propTypes = {\n  list: PropTypes.arrayOf(PropTypes.object),\n};\n","export const imgUrl = 'https://image.tmdb.org/t/p/w500';\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  overflow: hidden;\n  width: 700px;\n  display: flex;\n  align-items: center;\n\n  margin-bottom: 40px;\n`;\n\nexport const Input = styled.input`\n  height: 46.5px;\n  width: 100%;\n  background-color: #4d4f57;\n\n  font-weight: 600;\n  font-size: 20px;\n\n  padding-left: 15px;\n\n  border-top-right-radius: 20px;\n  border-bottom-right-radius: 20px;\n  border: none;\n\n  color: #ffffff;\n  font-weight: 600;\n  ::placeholder {\n    color: #0b0809;\n    font-weight: 600;\n  }\n  transition: background-color 300ms cubic-bezier(0.23, 1, 0.32, 1);\n  &:hover,\n  &:focus {\n    background-color: #313649;\n  }\n`;\nexport const SearchButton = styled.button`\n  cursor: pointer;\n\n  /* outline: none; */\n  background-color: #4d4f57;\n  padding: 10px 20px;\n  border-top-left-radius: 20px;\n  border-bottom-left-radius: 20px;\n  border: none;\n  border-right: 1px solid #0b0809;\n  transition: background-color 300ms cubic-bezier(0.23, 1, 0.32, 1);\n\n  &:hover,\n  &:focus {\n    background-color: #313649;\n  }\n\n  & svg {\n    width: 25px;\n    height: 25px;\n  }\n`;\n","import PropTypes from 'prop-types';\n\nimport { FiSearch } from 'react-icons/fi';\nimport { Form, Input, SearchButton } from './SearchForm.styled';\n\nexport const SearchForm = ({ onSubmit, onChange, query }) => {\n  return (\n    <Form autoComplete=\"off\" onSubmit={onSubmit}>\n      <SearchButton type=\"submit\">\n        <FiSearch />\n      </SearchButton>\n      <Input\n        type=\"text\"\n        autoFocus\n        value={query}\n        name=\"search\"\n        onChange={e => onChange(e.target.value.trim().toLowerCase())}\n        placeholder=\"Search movies\"\n      />\n    </Form>\n  );\n};\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  query: PropTypes.string.isRequired,\n};\n","const { default: styled } = require('styled-components');\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n`;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { fetchFilmsByName } from 'api/api';\nimport { SearchForm } from 'components/SearchForm/SearchForm';\nimport { MovieList } from 'components/MovieList/MovieList';\nimport { ErrorMessage } from 'components/ErrorMessage/ErorrMessage';\nimport { Wrapper } from './Movies.styled.js';\nimport { Loader } from 'components/Loader.jsx';\n\nconst Movies = () => {\n  const [query, setQuery] = useState('');\n  const [filmList, setFilmList] = useState([]);\n  const [error, setError] = useState(null);\n  const [searchParam, setSearchParam] = useSearchParams();\n  const search = searchParam.get('query') ?? '';\n  const [isLoading, setIsLoading] = useState(false);\n\n  const getQuery = e => {\n    e.preventDefault();\n\n    const newQuery = e.target[1].value;\n    if (newQuery === query) {\n      alert('Results');\n      return;\n    }\n    setQuery(newQuery);\n  };\n\n  const changeInput = value => {\n    setSearchParam(value !== '' ? { query: value } : {});\n  };\n\n  useEffect(() => {\n    if (search) {\n      setQuery(search);\n    }\n    if (!query) {\n      return;\n    }\n    createFilmList(query);\n    // eslint-disable-next-line\n  }, [query]);\n\n  async function createFilmList(newQuery) {\n    try {\n      setFilmList([]);\n      setIsLoading(true);\n      const films = await fetchFilmsByName(newQuery);\n      if (!films.length) {\n        setError(false);\n        return;\n      }\n\n      setFilmList(films);\n      setError(true);\n    } catch {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <Wrapper>\n      <SearchForm onSubmit={getQuery} onChange={changeInput} query={search} />\n      {isLoading && <Loader />}\n      {error === false ? (\n        <ErrorMessage text={'Sorry, no results'} />\n      ) : (\n        <MovieList list={filmList} />\n      )}\n    </Wrapper>\n  );\n};\n\nexport default Movies;\n"],"names":["axios","API_KEY","fetchTrendyFilms","response","data","results","console","error","fetchFilmsByName","query","getFilmInformation","filmId","getFilmCredits","cast","getFilmReviews","Error","styled","ErrorMessage","text","List","MovieItem","Poster","MovieInfo","MovieName","ReleaseDate","Rating","p","rating","MovieList","list","useState","movies","setMovies","location","useLocation","currentUrl","pathname","trendyMovies","useEffect","createMovieList","map","id","poster_path","title","release_date","vote_average","to","state","from","src","imgUrl","poster","alt","toFixed","Form","Input","SearchButton","SearchForm","onSubmit","onChange","autoComplete","type","autoFocus","value","name","e","target","trim","toLowerCase","placeholder","Wrapper","require","default","div","setQuery","filmList","setFilmList","setError","useSearchParams","searchParam","setSearchParam","search","get","isLoading","setIsLoading","newQuery","films","length","createFilmList","preventDefault","alert","Loader"],"sourceRoot":""}